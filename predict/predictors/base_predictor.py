# -*- coding: utf-8 -*-
# pylint: disable=no-name-in-module

"""
Abstract predictor class\n
A predictor is the specific interface needed for using a predictive model\n
Predictors must:
    - load an object or process in memory from a local file representing a model
    - convert feature strings into the appropriate input formats
    - generate numerical predictions on demand given one or more features
    - parse and return prediction outputs
    - allow the local model file to be modified during operation to ensure high availability of predictions
    - stop and clear any objects or processes used during prediction
"""

from abc import ABCMeta, abstractmethod
from predict.enums import ModelStatus
from tools.general import precision_compare
from numpy import ndarray


class BasePredictor(object):
    """
    BasePredictor is an abstract class to be used as the parent for any implemented predictors
    Predictor child classes provide the type specific methods to load, stop, and generate predictions for a model

    Attributes
        model (DeployedModel): model object
    """

    __metaclass__ = ABCMeta

    model = None

    model_type = None
    process = None

    def __init__(self, model):
        """
        parent method for initializing a predictor with a given model object
        should only be called from child classes

        Args:
            model (DeployedModel): this is the model object to use for instatiating a predictor

        Returns:
            BasePredictor: BasePredictor object
        """

        # clone this object to avoid external manipulation of references
        self.model = model.clone()

        # these need to be set in the child class init method
        self.model_type = None
        self.process = None

    def load(self, verify_on_load=True):
        """
        parent method for loading a model, provides basic verification function
        should only be called from child classes, with appropriate code to load model

        Args:
            verify_on_load (bool): switch to verify model when loading
        """

        if verify_on_load:
            self.verify()

        if not self.is_active():
            self.stop()

    @abstractmethod
    def stop(self):
        """
        abstract stop method, must be implemented in child class
        """

        raise Exception('cannot call abstract stop method in base predictor class')

    @abstractmethod
    def predict(self, example):
        """
        abstract predict method, must be implemented in child class

        Args:
            example (arraylike(str)): example feature vector(s) to use for generating prediction
        """

        raise Exception('cannot call abstract predict method in base predictor class')

    def verify(self):
        """
        verify that the output generated by predict method matches what is expected

        Returns:
            bool: True if output matches, False otherwise
        """

        result = None
        try:
            result = self.predict([self.model.example])[0]
            if not precision_compare(self.model.output, result):
                raise
        except Exception:
            err = 'model verification failed: received {pred}, expected: {test}'
            raise Exception(err.format(pred=result, test=self.model.output))

        return True

    def is_active(self):
        """
        verify that model is active

        Returns:
            bool: True if status is active and model is defined, False otherwise
        """

        return self.model.status == ModelStatus.active and self.process is not None

    def can_predict(self, example):
        """
        verify model is able to predict

        Args:
            example (arraylike(str)): example to use in prediction

        Returns:
            bool: True if model can predict and example is the right type

        """

        if self.process is None:
            raise Exception('model process is not active')

        if not isinstance(example, (frozenset, list, set, tuple, ndarray)):
            raise Exception('invalid input: {} expected arraylike object'.format(example))

        return True

    def get_model(self):
        """
        return predictor model

        Returns:
            DeployedModel object
        """

        return self.model
